"use strict";

let optionUser;
let isGameFinish = false;

let userLife = 100;
let monsterLife = 100;

let stockPotion = 1;
let healingPotion = 20;

let attackPlayer = 20;
let attackMoster = 25;



runGame();


function runGame() {
  do {
    showMenuGame();

    optionUser = +prompt("Choose your option ‚ôüÔ∏è:");

    menuOption();

    showStatusLife();

    checkGameStatus();

  } while (optionUser != 4 && isGameFinish == false);

  // Muestra el mensaje de finalizar el juego seg√∫n la condici√≥n de salida.
  console.log(
    optionUser === 4
      ? "Thanks for playing üòä!"
      : monsterLife < userLife
      ? "You winüèÜ!!"
      : "You lost...üíÄ"
  );
}



function menuOption() {
  switch (optionUser) {
    case 1:
      playerAttack();
      mosterAttack();
      break;

    case 2:
      usePotion();
      mosterAttack();
      break;

    case 3:
      findPotion();
      mosterAttack();
      break;

    case 4:
      isGameFinish = true;
      break;

    default:
      console.log(`Incorrect option value ‚ùå, ${optionUser}. Option 1-4.`);
  }
}


/**
 * Realiza el ataque del jugador al monstruo.
 *
 * La funci√≥n genera de forma aleatoria un valor de ataque basado en attackPlayer
 * y disminuye la vida del monstruo en esa cantidad. Si la vida resultante es menor que 0,
 * se establece en 0 para evitar valores negativos.
 */
function playerAttack() {
  let playerAttack = generateRandom(attackPlayer);

  monsterLife = monsterLife - playerAttack < 0 ? 0 : monsterLife - playerAttack;

  console.log(`The player attack is ${playerAttack} üëäüèªüí•.`);
}



/**
 * Simula el ataque del monstruo al jugador.
 *
 * Se genera un valor de ataque de forma aleatoria basado en attackMoster
 * y se reduce la vida del jugador en esa cantidad. Se muestra el valor de ataque realizado.
 */
function mosterAttack() {
  let attack = generateRandom(attackMoster);
  userLife = userLife - attack;

  console.log(`Attack moster is ${attack} üëπüí•.`);
}



/**
 * Permite al jugador usar una poci√≥n para recuperar puntos de vida.
 *
 * Si no hay pociones disponibles, muestra un mensaje indic√°ndolo.
 * De lo contrario, genera aleatoriamente la cantidad de vida a recuperar hasta healingPotion
 * y se suma a la vida actual del jugador, sin exceder el m√°ximo de 100.
 * Se decrementa el stock de pociones.
 */
function usePotion() {
  if (stockPotion < 1) {
    console.log("There are no potion üò∂‚Äçüå´Ô∏è.");
  } else {
    let lifeAdd = generateRandom(healingPotion);

    // Asegura que la vida del jugador no supere 100 despu√©s de la curaci√≥n.
    userLife = userLife + lifeAdd > 100 ? 100 : userLife + lifeAdd;

    stockPotion--;

    console.log(`Potion life add ${lifeAdd} üçØ to life player üß∏, ${userLife}`);
  }
}



/**
 * Intenta encontrar una poci√≥n durante el juego.
 *
 * Se genera aleatoriamente un n√∫mero entre 0 y 4. Si el valor obtenido es 1,
 * se incrementa la cantidad de pociones en el inventario. Se muestra un mensaje
 * indicando si se encontr√≥ una poci√≥n o no.
 */
function findPotion() {
  let luckyFind = generateRandom(5);

  // Si luckyFind es igual a 1, se incrementa el stock de pociones.
  stockPotion = luckyFind === 1 ? stockPotion + 1 : stockPotion;

  console.log(
    luckyFind === 1
      ? "You hace recived a potion üçØ."
      : "Bad lucky, no potion found ü•≤."
  );
}


/**
 * Verifica el estado de la partida para determinar si se debe finalizar el juego.
 *
 * El juego se finaliza si la vida del jugador o del monstruo es menor o igual a 0.
 */
function checkGameStatus() {
  isGameFinish = userLife <= 0 || monsterLife <= 0 ? true : false;
}


/**
 * Genera un n√∫mero aleatorio entero en el rango 0 a 1.
 *
 * @param {number} value - Valor superior para generar el n√∫mero aleatorio.
 * @return {number} valor aleatorio
 */
function generateRandom(value) {
  return Math.floor(Math.random() * value);
}



function showStatusLife() {
  console.log(
    `The player life is ${userLife <= 0 ? 0 : userLife} üíô\nThe moster life is ${
      monsterLife <= 0 ? 0 : monsterLife
    } üñ§`
  );
}



function showMenuGame() {
  console.log("1. Attack the moster ü¶æ.\n2. Use potion üçØ\n3. Find potion üîç\n4. Exit üö™");
}
